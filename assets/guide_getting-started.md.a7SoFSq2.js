import{_ as i,c as a,o as n,ah as t}from"./chunks/framework.QWunQcuv.js";const c=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"guide/getting-started.md","filePath":"en/guide/getting-started.md"}'),e={name:"guide/getting-started.md"};function l(p,s,r,h,o,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to “Getting Started”">​</a></h1><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to “Installation”">​</a></h2><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to “Prerequisites”">​</a></h3><ul><li><a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a> version 18 or higher.</li><li>Terminal for accessing MCP Kit via its command line interface (CLI).</li></ul><p>MCP Kit can be used to create new MCP (Model Context Protocol) applications. You can install and use it with any of the following package managers:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-24" id="tab-25" checked><label data-title="npm" for="tab-25">npm</label><input type="radio" name="group-24" id="tab-26"><label data-title="pnpm" for="tab-26">pnpm</label><input type="radio" name="group-24" id="tab-27"><label data-title="yarn" for="tab-27">yarn</label></div><div class="blocks"><div class="language-sh active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mcp-kit@latest</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mcp-kit@latest</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mcp-kit@latest</span></span></code></pre></div></div></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>MCP Kit is an ESM-only package. It requires Node.js version 18 or higher and uses modern JavaScript features.</p></div><h2 id="setup-wizard" tabindex="-1">Setup Wizard <a class="header-anchor" href="#setup-wizard" aria-label="Permalink to “Setup Wizard”">​</a></h2><p>When you run the create command, MCP Kit will launch an interactive setup wizard that guides you through creating a new project:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">┌</span><span style="--shiki-light:#1b7c83;--shiki-light-font-weight:bold;--shiki-dark:#39c5cf;--shiki-dark-font-weight:bold;">  MCP Kit - The Modern Context Protocol Builder</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">│</span></span>
<span class="line"><span style="--shiki-light:#28a745;--shiki-dark:#34d058;">◇</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">  Project type:</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">│</span><span style="--shiki-light:#24292e80;--shiki-dark:#e1e4e880;">  MCP Server</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">│</span></span>
<span class="line"><span style="--shiki-light:#28a745;--shiki-dark:#34d058;">◇</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">  Project name:</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">│</span><span style="--shiki-light:#24292e80;--shiki-dark:#e1e4e880;">  mcp-server-starter</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">│</span></span>
<span class="line"><span style="--shiki-light:#28a745;--shiki-dark:#34d058;">◇</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">  Project language:</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">│</span><span style="--shiki-light:#24292e80;--shiki-dark:#e1e4e880;">  TypeScript</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">│</span></span>
<span class="line"><span style="--shiki-light:#28a745;--shiki-dark:#34d058;">◇</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">  Project transport type:</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">│</span><span style="--shiki-light:#24292e80;--shiki-dark:#e1e4e880;">  STDIO</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">│</span></span>
<span class="line"><span style="--shiki-light:#28a745;--shiki-dark:#34d058;">◇</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">  Project template:</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">│</span><span style="--shiki-light:#24292e80;--shiki-dark:#e1e4e880;">  Standard (recommended)</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">│</span></span>
<span class="line"><span style="--shiki-light:#28a745;--shiki-dark:#34d058;">◇</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">  Do you want to install dependencies?</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">│</span><span style="--shiki-light:#24292e80;--shiki-dark:#e1e4e880;">  Yes</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">│</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">└</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">  Project created successfully!</span></span></code></pre></div><ol><li><p>First, you&#39;ll be prompted to select a <strong>Project type</strong>:</p><ul><li><strong>MCP Server</strong>: Creates a server that provides tools, resources, and prompts for MCP clients</li><li><strong>MCP Client</strong>: Creates a client that connects to MCP servers</li></ul></li><li><p>Next, you&#39;ll be asked to provide a <strong>Project name</strong> (defaults to <code>mcp-[type]-starter</code>)</p></li><li><p>Choose your preferred <strong>Project language</strong>:</p><ul><li><strong>TypeScript</strong> (recommended)</li><li><strong>JavaScript</strong></li></ul></li><li><p>Select <strong>Project transport type</strong> (multiple options can be selected):</p><ul><li><strong>STDIO</strong>: Communication through standard input/output streams</li><li><strong>Streamable HTTP</strong>: RESTful API with streaming capabilities</li><li><strong>SSE</strong>: Server-Sent Events for real-time communication</li></ul></li><li><p>Choose a <strong>Project template</strong>:</p><ul><li><strong>Standard</strong>: Includes recommended plugins and configurations</li><li><strong>Custom</strong>: Allows you to select specific plugins</li></ul></li><li><p>If you selected <strong>Custom</strong> template, you&#39;ll be prompted to select <strong>Project plugins</strong>:</p><ul><li><strong>GitHub Action</strong>: CI/CD workflows</li><li><strong>Vitest</strong>: Testing framework</li><li><strong>Inspector</strong>: Debugging tools (server projects only)</li><li><strong>ESLint + Prettier + Lint-staged</strong>: Code quality tools</li><li><strong>Commitlint</strong>: Commit message linting</li><li><strong>Changelog</strong>: Automated changelog generation</li></ul></li><li><p>Finally, you&#39;ll be asked if you want to <strong>install dependencies</strong> automatically</p></li></ol><p>After completing these steps, MCP Kit will create your project with the selected configuration.</p><h2 id="file-structure" tabindex="-1">File Structure <a class="header-anchor" href="#file-structure" aria-label="Permalink to “File Structure”">​</a></h2><p>The generated file structure depends on the project type you selected.</p><h3 id="mcp-server-project-structure" tabindex="-1">MCP Server Project Structure <a class="header-anchor" href="#mcp-server-project-structure" aria-label="Permalink to “MCP Server Project Structure”">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>├── src/</span></span>
<span class="line"><span>│   ├── tools/             # MCP tools implementation</span></span>
<span class="line"><span>│   │   ├── index.ts       # Tools registration</span></span>
<span class="line"><span>│   │   └── register*.ts   # Individual tool implementations</span></span>
<span class="line"><span>│   ├── resources/         # MCP resources implementation</span></span>
<span class="line"><span>│   │   └── index.ts       # Resources registration</span></span>
<span class="line"><span>│   ├── prompts/           # MCP prompts implementation</span></span>
<span class="line"><span>│   │   └── index.ts       # Prompts registration</span></span>
<span class="line"><span>│   ├── services/          # Server implementations</span></span>
<span class="line"><span>│   │   ├── stdio.ts       # STDIO transport implementation</span></span>
<span class="line"><span>│   │   └── web.ts         # Streamable HTTP and SSE transport implementation</span></span>
<span class="line"><span>│   └── index.ts           # Entry point</span></span>
<span class="line"><span>├── tests/                 # Test files (optional)</span></span>
<span class="line"><span>├── scripts/               # Build and development scripts</span></span>
<span class="line"><span>├── .github/               # GitHub Actions workflows (optional)</span></span>
<span class="line"><span>├── .husky/                # Git hooks (optional)</span></span>
<span class="line"><span>├── .prettierrc            # Prettier configuration (optional)</span></span>
<span class="line"><span>├── changelog-option.js    # Conventional changelog config (optional)</span></span>
<span class="line"><span>├── commitlint.config.js   # Commit message lint rules (optional)</span></span>
<span class="line"><span>├── eslint.config.js       # ESLint configuration (optional)</span></span>
<span class="line"><span>├── lint-staged.config.js  # Lint-staged configuration (optional)</span></span>
<span class="line"><span>├── vitest.*.ts            # Vitest configuration (optional)</span></span>
<span class="line"><span>└── package.json</span></span></code></pre></div><h3 id="mcp-client-project-structure" tabindex="-1">MCP Client Project Structure <a class="header-anchor" href="#mcp-client-project-structure" aria-label="Permalink to “MCP Client Project Structure”">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>├── src/</span></span>
<span class="line"><span>│   └── index.ts           # Entry point with transport implementations</span></span>
<span class="line"><span>├── tests/                 # Test files (optional)</span></span>
<span class="line"><span>├── scripts/               # Build and development scripts</span></span>
<span class="line"><span>├── .github/               # GitHub Actions workflows (optional)</span></span>
<span class="line"><span>├── .husky/                # Git hooks (optional)</span></span>
<span class="line"><span>├── .prettierrc            # Prettier configuration (optional)</span></span>
<span class="line"><span>├── changelog-option.js    # Conventional changelog config (optional)</span></span>
<span class="line"><span>├── commitlint.config.js   # Commit message lint rules (optional)</span></span>
<span class="line"><span>├── eslint.config.js       # ESLint configuration (optional)</span></span>
<span class="line"><span>├── lint-staged.config.js  # Lint-staged configuration (optional)</span></span>
<span class="line"><span>├── vitest.*.ts            # Vitest configuration (optional)</span></span>
<span class="line"><span>└── package.json</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>The project structure is designed to be modular and extensible. You can customize it according to your needs.</p></div><h2 id="up-and-running" tabindex="-1">Up and Running <a class="header-anchor" href="#up-and-running" aria-label="Permalink to “Up and Running”">​</a></h2><p>After creating your project, you can use the following npm scripts to develop, test, and build your application:</p><h3 id="mcp-server-development-scripts" tabindex="-1">MCP Server Development Scripts <a class="header-anchor" href="#mcp-server-development-scripts" aria-label="Permalink to “MCP Server Development Scripts”">​</a></h3><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Start the development server in stdio mode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev:web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Start the development server in web mode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Build the project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Run tests (if vitest plugin is selected)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;coverage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Generate test coverage report (if vitest plugin is selected)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Run linting (if style plugin is selected)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>To start the development server, run:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-198" id="tab-199" checked><label data-title="npm" for="tab-199">npm</label><input type="radio" name="group-198" id="tab-200"><label data-title="pnpm" for="tab-200">pnpm</label><input type="radio" name="group-198" id="tab-201"><label data-title="yarn" for="tab-201">yarn</label></div><div class="blocks"><div class="language-sh active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div></div></div><h3 id="mcp-client-development-scripts" tabindex="-1">MCP Client Development Scripts <a class="header-anchor" href="#mcp-client-development-scripts" aria-label="Permalink to “MCP Client Development Scripts”">​</a></h3><p>The client project includes similar scripts for development, testing, and building:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Start the client in development mode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Build the project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Run tests (if vitest plugin is selected)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;coverage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Generate test coverage report (if vitest plugin is selected)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Run linting (if style plugin is selected)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,28)]))}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
